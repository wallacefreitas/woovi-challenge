type Query {
  aggregateEntry(where: EntryWhereInput, orderBy: [EntryOrderByWithRelationInput!], cursor: EntryWhereUniqueInput, take: Int, skip: Int): AggregateEntry!
  findFirstEntry(where: EntryWhereInput, orderBy: [EntryOrderByWithRelationInput!], cursor: EntryWhereUniqueInput, take: Int, skip: Int, distinct: [EntryScalarFieldEnum!]): Entry
  entries(where: EntryWhereInput, orderBy: [EntryOrderByWithRelationInput!], cursor: EntryWhereUniqueInput, take: Int, skip: Int, distinct: [EntryScalarFieldEnum!]): [Entry!]!
  entry(where: EntryWhereUniqueInput!): Entry
  groupByEntry(where: EntryWhereInput, orderBy: [EntryOrderByWithAggregationInput!], by: [EntryScalarFieldEnum!]!, having: EntryScalarWhereWithAggregatesInput, take: Int, skip: Int): [EntryGroupBy!]!
}

type AggregateEntry {
  _count: EntryCountAggregate
  _avg: EntryAvgAggregate
  _sum: EntrySumAggregate
  _min: EntryMinAggregate
  _max: EntryMaxAggregate
}

type EntryCountAggregate {
  id: Int!
  title: Int!
  description: Int!
  date: Int!
  value: Int!
  type: Int!
  _all: Int!
}

type EntryAvgAggregate {
  value: Float
}

type EntrySumAggregate {
  value: Float
}

type EntryMinAggregate {
  id: String
  title: String
  description: String
  date: String
  value: Float
  type: String
}

type EntryMaxAggregate {
  id: String
  title: String
  description: String
  date: String
  value: Float
  type: String
}

input EntryWhereInput {
  AND: [EntryWhereInput!]
  OR: [EntryWhereInput!]
  NOT: [EntryWhereInput!]
  id: StringFilter
  title: StringFilter
  description: StringFilter
  date: StringFilter
  value: FloatFilter
  type: StringFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input FloatFilter {
  equals: Float
  in: [Float!]
  notIn: [Float!]
  lt: Float
  lte: Float
  gt: Float
  gte: Float
  not: NestedFloatFilter
}

input NestedFloatFilter {
  equals: Float
  in: [Float!]
  notIn: [Float!]
  lt: Float
  lte: Float
  gt: Float
  gte: Float
  not: NestedFloatFilter
}

input EntryOrderByWithRelationInput {
  id: SortOrder
  title: SortOrder
  description: SortOrder
  date: SortOrder
  value: SortOrder
  type: SortOrder
}

enum SortOrder {
  asc
  desc
}

input EntryWhereUniqueInput {
  id: String
}

type Entry {
  id: String!
  title: String!
  description: String!
  date: String!
  value: Float!
  type: String!
}

enum EntryScalarFieldEnum {
  id
  title
  description
  date
  value
  type
}

type EntryGroupBy {
  id: String!
  title: String!
  description: String!
  date: String!
  value: Float!
  type: String!
  _count: EntryCountAggregate
  _avg: EntryAvgAggregate
  _sum: EntrySumAggregate
  _min: EntryMinAggregate
  _max: EntryMaxAggregate
}

input EntryOrderByWithAggregationInput {
  id: SortOrder
  title: SortOrder
  description: SortOrder
  date: SortOrder
  value: SortOrder
  type: SortOrder
  _count: EntryCountOrderByAggregateInput
  _avg: EntryAvgOrderByAggregateInput
  _max: EntryMaxOrderByAggregateInput
  _min: EntryMinOrderByAggregateInput
  _sum: EntrySumOrderByAggregateInput
}

input EntryCountOrderByAggregateInput {
  id: SortOrder
  title: SortOrder
  description: SortOrder
  date: SortOrder
  value: SortOrder
  type: SortOrder
}

input EntryAvgOrderByAggregateInput {
  value: SortOrder
}

input EntryMaxOrderByAggregateInput {
  id: SortOrder
  title: SortOrder
  description: SortOrder
  date: SortOrder
  value: SortOrder
  type: SortOrder
}

input EntryMinOrderByAggregateInput {
  id: SortOrder
  title: SortOrder
  description: SortOrder
  date: SortOrder
  value: SortOrder
  type: SortOrder
}

input EntrySumOrderByAggregateInput {
  value: SortOrder
}

input EntryScalarWhereWithAggregatesInput {
  AND: [EntryScalarWhereWithAggregatesInput!]
  OR: [EntryScalarWhereWithAggregatesInput!]
  NOT: [EntryScalarWhereWithAggregatesInput!]
  id: StringWithAggregatesFilter
  title: StringWithAggregatesFilter
  description: StringWithAggregatesFilter
  date: StringWithAggregatesFilter
  value: FloatWithAggregatesFilter
  type: StringWithAggregatesFilter
}

input StringWithAggregatesFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringWithAggregatesFilter
  _count: NestedIntFilter
  _min: NestedStringFilter
  _max: NestedStringFilter
}

input NestedStringWithAggregatesFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringWithAggregatesFilter
  _count: NestedIntFilter
  _min: NestedStringFilter
  _max: NestedStringFilter
}

input NestedIntFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: NestedIntFilter
}

input FloatWithAggregatesFilter {
  equals: Float
  in: [Float!]
  notIn: [Float!]
  lt: Float
  lte: Float
  gt: Float
  gte: Float
  not: NestedFloatWithAggregatesFilter
  _count: NestedIntFilter
  _avg: NestedFloatFilter
  _sum: NestedFloatFilter
  _min: NestedFloatFilter
  _max: NestedFloatFilter
}

input NestedFloatWithAggregatesFilter {
  equals: Float
  in: [Float!]
  notIn: [Float!]
  lt: Float
  lte: Float
  gt: Float
  gte: Float
  not: NestedFloatWithAggregatesFilter
  _count: NestedIntFilter
  _avg: NestedFloatFilter
  _sum: NestedFloatFilter
  _min: NestedFloatFilter
  _max: NestedFloatFilter
}

type Mutation {
  createOneEntry(data: EntryCreateInput!): Entry!
  deleteManyEntry(where: EntryWhereInput): AffectedRowsOutput!
  deleteOneEntry(where: EntryWhereUniqueInput!): Entry
  updateManyEntry(data: EntryUpdateManyMutationInput!, where: EntryWhereInput): AffectedRowsOutput!
  updateOneEntry(data: EntryUpdateInput!, where: EntryWhereUniqueInput!): Entry
  upsertOneEntry(where: EntryWhereUniqueInput!, create: EntryCreateInput!, update: EntryUpdateInput!): Entry!
}

input EntryCreateInput {
  id: String!
  title: String!
  description: String!
  date: String!
  value: Float!
  type: String!
}

type AffectedRowsOutput {
  count: Int!
}

input EntryUpdateManyMutationInput {
  id: StringFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
  description: StringFieldUpdateOperationsInput
  date: StringFieldUpdateOperationsInput
  value: FloatFieldUpdateOperationsInput
  type: StringFieldUpdateOperationsInput
}

input StringFieldUpdateOperationsInput {
  set: String
}

input FloatFieldUpdateOperationsInput {
  set: Float
  increment: Float
  decrement: Float
  multiply: Float
  divide: Float
}

input EntryUpdateInput {
  id: StringFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
  description: StringFieldUpdateOperationsInput
  date: StringFieldUpdateOperationsInput
  value: FloatFieldUpdateOperationsInput
  type: StringFieldUpdateOperationsInput
}
